{
  Session session=Session.getActiveSession();
  Request.Callback graphCallback=new Request.Callback(){
    @Override public void onCompleted(    Response response){
      if (graphContext != null) {
        if (response.getError() != null) {
          graphContext.error(response.getError().getErrorMessage());
        }
 else {
          GraphObject graphObject=response.getGraphObject();
          graphContext.success(graphObject.getInnerJSONObject());
        }
        graphPath=null;
        graphContext=null;
      }
    }
  }
;
  try {
    graphPath=URLDecoder.decode(graphPath,"UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  String[] urlParts=graphPath.split("\\?");
  String graphAction=urlParts[0];
  Request graphRequest=Request.newGraphPathRequest(null,graphAction,graphCallback);
  Bundle params=graphRequest.getParameters();
  if (urlParts.length > 1) {
    String[] queries=urlParts[1].split("&");
    for (    String query : queries) {
      int splitPoint=query.indexOf("=");
      if (splitPoint > 0) {
        String key=query.substring(0,splitPoint);
        String value=query.substring(splitPoint + 1,query.length());
        params.putString(key,value);
      }
    }
  }
  params.putString("access_token",session.getAccessToken());
  graphRequest.setParameters(params);
  graphRequest.executeAsync();
}
