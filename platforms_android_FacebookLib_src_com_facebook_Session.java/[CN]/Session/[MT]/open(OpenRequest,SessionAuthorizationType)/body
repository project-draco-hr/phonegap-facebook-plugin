{
  validatePermissions(openRequest,authType);
  validateLoginBehavior(openRequest);
  SessionState newState;
synchronized (this.lock) {
    if (pendingAuthorizationRequest != null) {
      postStateChange(state,state,new UnsupportedOperationException("Session: an attempt was made to open a session that has a pending request."));
      return;
    }
    final SessionState oldState=this.state;
switch (this.state) {
case CREATED:
      this.state=newState=SessionState.OPENING;
    if (openRequest == null) {
      throw new IllegalArgumentException("openRequest cannot be null when opening a new Session");
    }
  pendingAuthorizationRequest=openRequest;
break;
case CREATED_TOKEN_LOADED:
if (openRequest != null && !Utility.isNullOrEmpty(openRequest.getPermissions())) {
if (!Utility.isSubset(openRequest.getPermissions(),getPermissions())) {
  pendingAuthorizationRequest=openRequest;
}
}
if (pendingAuthorizationRequest == null) {
this.state=newState=SessionState.OPENED;
}
 else {
this.state=newState=SessionState.OPENING;
}
break;
default :
throw new UnsupportedOperationException("Session: an attempt was made to open an already opened session.");
}
if (openRequest != null) {
addCallback(openRequest.getCallback());
}
this.postStateChange(oldState,newState,null);
}
if (newState == SessionState.OPENING) {
authorize(openRequest);
}
}
