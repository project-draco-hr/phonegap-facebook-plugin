{
  PluginResult pr=new PluginResult(PluginResult.Status.NO_RESULT);
  pr.setKeepCallback(true);
  if (action.equals("init")) {
    try {
      String appId=args.getString(0);
      try {
        secret=this.ctx.getPackageManager().getApplicationInfo(this.ctx.getPackageName(),PackageManager.GET_META_DATA).metaData.getString("app_secret");
      }
 catch (      NameNotFoundException e) {
        return new PluginResult(PluginResult.Status.ERROR,"No app-secret <meta-data> element found in Android Manifest! Please read the README");
      }
      facebook=new Facebook(appId);
      Log.d(TAG,"init: Initializing plugin.");
      SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this.ctx);
      String access_token=prefs.getString("access_token",null);
      Long expires=prefs.getLong("access_expires",-1);
      if (access_token != null && expires != -1) {
        this.facebook.setAccessToken(access_token);
        this.facebook.setAccessExpires(expires);
        try {
          JSONObject o=new JSONObject(this.facebook.request("/me"));
          this.userId=o.getString("id");
        }
 catch (        MalformedURLException e) {
          e.printStackTrace();
        }
catch (        IOException e) {
          e.printStackTrace();
        }
catch (        JSONException e) {
          e.printStackTrace();
        }
      }
      if (facebook.isSessionValid() && this.userId != null) {
        return new PluginResult(PluginResult.Status.OK,this.getResponse());
      }
 else {
        return new PluginResult(PluginResult.Status.NO_RESULT);
      }
    }
 catch (    JSONException e) {
      e.printStackTrace();
      return new PluginResult(PluginResult.Status.ERROR,"Invalid JSON args used. expected a string as the first arg.");
    }
  }
 else   if (action.equals("login")) {
    if (facebook != null) {
      if (facebook.isSessionValid()) {
        Log.d(TAG,"login: Session already valid.");
        pr=new PluginResult(PluginResult.Status.OK,getResponse());
      }
 else {
        final ConnectPlugin me=this;
        String[] permissions=new String[args.length()];
        try {
          for (int i=0; i < args.length(); i++) {
            permissions[i]=args.getString(i);
          }
        }
 catch (        JSONException e1) {
          e1.printStackTrace();
          return new PluginResult(PluginResult.Status.ERROR,"Invalid JSON args used. Expected a string array of permissions.");
        }
        this.ctx.setActivityResultCallback(this);
        this.permissions=permissions;
        this.callbackId=callbackId;
        Runnable runnable=new Runnable(){
          public void run(){
            me.facebook.authorize((Activity)me.ctx,me.permissions,new AuthorizeListener(me));
          }
        }
;
        this.ctx.runOnUiThread(runnable);
      }
    }
 else {
      pr=new PluginResult(PluginResult.Status.ERROR,"Must call init before login.");
    }
  }
 else   if (action.equals("logout")) {
    if (facebook != null) {
      try {
        facebook.logout(this.ctx);
        SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this.ctx);
        prefs.edit().putLong("access_expires",-1).commit();
        prefs.edit().putString("access_token",null).commit();
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
        pr=new PluginResult(PluginResult.Status.MALFORMED_URL_EXCEPTION,"Error logging out.");
      }
catch (      IOException e) {
        e.printStackTrace();
        pr=new PluginResult(PluginResult.Status.IO_EXCEPTION,"Error logging out.");
      }
      pr=new PluginResult(PluginResult.Status.OK,getResponse());
    }
 else {
      pr=new PluginResult(PluginResult.Status.ERROR,"Must call init before logout.");
    }
  }
 else   if (action.equals("getLoginStatus")) {
    if (facebook != null) {
      pr=new PluginResult(PluginResult.Status.OK,getResponse());
    }
 else {
      pr=new PluginResult(PluginResult.Status.ERROR,"Must call init before getLoginStatus.");
    }
  }
  return pr;
}
