{
  PluginResult pr=new PluginResult(PluginResult.Status.NO_RESULT);
  pr.setKeepCallback(true);
  if (action.equals("init")) {
    try {
      facebook=new Facebook(args.getString(0));
      return new PluginResult(PluginResult.Status.OK);
    }
 catch (    JSONException e) {
      e.printStackTrace();
      return new PluginResult(PluginResult.Status.ERROR,"Invalid JSON args used. expected a string as the first arg.");
    }
  }
 else   if (action.equals("login")) {
    if (facebook != null) {
      if (facebook.isSessionValid()) {
        Log.d("FB","Session already valid");
        pr=new PluginResult(PluginResult.Status.OK,getResponse());
      }
 else {
        final ConnectPlugin me=this;
        String[] permissions=new String[args.length()];
        try {
          for (int i=0; i < args.length(); i++) {
            permissions[i]=args.getString(i);
          }
        }
 catch (        JSONException e1) {
          e1.printStackTrace();
          return new PluginResult(PluginResult.Status.ERROR,"Invalid JSON args used. Expected a string array of permissions.");
        }
        this.ctx.setActivityResultCallback(this);
        this.facebook.authorize(this.ctx,permissions,1234567890,new DialogListener(){
          @Override public void onComplete(          Bundle values){
            Log.d("FB","authorized");
            me.success(getResponse(),callbackId);
          }
          @Override public void onFacebookError(          FacebookError error){
            Log.d("FB","facebook error");
            me.error("Facebook error: " + error.getMessage(),callbackId);
          }
          @Override public void onError(          DialogError e){
            Log.d("FB","other error");
            me.error("Dialog error: " + e.getMessage(),callbackId);
          }
          @Override public void onCancel(){
            Log.d("FB","cancel");
            me.error("Cancelled",callbackId);
          }
        }
);
      }
    }
 else {
      pr=new PluginResult(PluginResult.Status.ERROR,"Must call FB.init before FB.login");
    }
  }
 else   if (action.equals("logout")) {
    if (facebook != null) {
      try {
        facebook.logout(this.ctx);
      }
 catch (      MalformedURLException e) {
        e.printStackTrace();
        pr=new PluginResult(PluginResult.Status.MALFORMED_URL_EXCEPTION,"Error logging out.");
      }
catch (      IOException e) {
        e.printStackTrace();
        pr=new PluginResult(PluginResult.Status.IO_EXCEPTION,"Error logging out.");
      }
      pr=new PluginResult(PluginResult.Status.OK,getResponse());
    }
  }
 else   if (action.equals("getLoginStatus")) {
    if (facebook != null) {
      pr=new PluginResult(PluginResult.Status.OK,getResponse());
    }
  }
  return pr;
}
