{
  Log.d(TAG,"onSessionStateChange:" + state.toString());
  if (exception != null && exception instanceof FacebookOperationCanceledException) {
    Log.e(TAG,"exception:" + exception.toString());
    handleError(exception,loginContext);
  }
 else {
    final Session session=Session.getActiveSession();
    if (state.isOpened()) {
      if (loginContext != null) {
        getUserInfo(session,new Request.GraphUserCallback(){
          @Override public void onCompleted(          GraphUser user,          Response response){
            if (loginContext != null) {
              if (response.getError() != null) {
                loginContext.error(getFacebookRequestErrorResponse(response.getError()));
              }
 else {
                GraphObject graphObject=response.getGraphObject();
                Log.d(TAG,"returning login object " + graphObject.getInnerJSONObject().toString());
                userID=user.getId();
                loginContext.success(getResponse());
                loginContext=null;
              }
            }
 else {
              userID=user.getId();
            }
          }
        }
);
      }
 else       if (graphContext != null) {
        makeGraphCall();
      }
    }
 else     if (state == SessionState.CLOSED_LOGIN_FAILED && loginContext != null) {
      handleError(new FacebookAuthorizationException("Session was closed and was not closed normally"),loginContext);
    }
  }
}
