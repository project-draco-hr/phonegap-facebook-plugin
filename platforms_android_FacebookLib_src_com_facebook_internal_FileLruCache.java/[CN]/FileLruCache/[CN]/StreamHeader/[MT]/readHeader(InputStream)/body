{
  int version=stream.read();
  if (version != HEADER_VERSION) {
    return null;
  }
  int headerSize=0;
  for (int i=0; i < 3; i++) {
    int b=stream.read();
    if (b == -1) {
      Logger.log(LoggingBehavior.CACHE,TAG,"readHeader: stream.read returned -1 while reading header size");
      return null;
    }
    headerSize<<=8;
    headerSize+=b & 0xff;
  }
  byte[] headerBytes=new byte[headerSize];
  int count=0;
  while (count < headerBytes.length) {
    int readCount=stream.read(headerBytes,count,headerBytes.length - count);
    if (readCount < 1) {
      Logger.log(LoggingBehavior.CACHE,TAG,"readHeader: stream.read stopped at " + Integer.valueOf(count) + " when expected "+ headerBytes.length);
      return null;
    }
    count+=readCount;
  }
  String headerString=new String(headerBytes);
  JSONObject header=null;
  JSONTokener tokener=new JSONTokener(headerString);
  try {
    Object parsed=tokener.nextValue();
    if (!(parsed instanceof JSONObject)) {
      Logger.log(LoggingBehavior.CACHE,TAG,"readHeader: expected JSONObject, got " + parsed.getClass().getCanonicalName());
      return null;
    }
    header=(JSONObject)parsed;
  }
 catch (  JSONException e) {
    throw new IOException(e.getMessage());
  }
  return header;
}
