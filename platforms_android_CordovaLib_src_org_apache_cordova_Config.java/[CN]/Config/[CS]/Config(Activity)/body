{
  if (action == null) {
    LOG.i("CordovaLog","There is no activity. Is this on the lock screen?");
    return;
  }
  int id=action.getResources().getIdentifier("config","xml",action.getClass().getPackage().getName());
  if (id == 0) {
    id=action.getResources().getIdentifier("config","xml",action.getPackageName());
    if (id == 0) {
      LOG.i("CordovaLog","config.xml missing. Ignoring...");
      return;
    }
  }
  whitelist.addWhiteListEntry("file:///*",false);
  whitelist.addWhiteListEntry("content:///*",false);
  whitelist.addWhiteListEntry("data:*",false);
  XmlResourceParser xml=action.getResources().getXml(id);
  int eventType=-1;
  while (eventType != XmlResourceParser.END_DOCUMENT) {
    if (eventType == XmlResourceParser.START_TAG) {
      String strNode=xml.getName();
      if (strNode.equals("access")) {
        String origin=xml.getAttributeValue(null,"origin");
        String subdomains=xml.getAttributeValue(null,"subdomains");
        if (origin != null) {
          whitelist.addWhiteListEntry(origin,(subdomains != null) && (subdomains.compareToIgnoreCase("true") == 0));
        }
      }
 else       if (strNode.equals("log")) {
        String level=xml.getAttributeValue(null,"level");
        Log.d(TAG,"The <log> tags is deprecated. Use <preference name=\"loglevel\" value=\"" + level + "\"/> instead.");
        if (level != null) {
          LOG.setLogLevel(level);
        }
      }
 else       if (strNode.equals("preference")) {
        String name=xml.getAttributeValue(null,"name").toLowerCase(Locale.getDefault());
        if (name.equalsIgnoreCase("LogLevel")) {
          String level=xml.getAttributeValue(null,"value");
          LOG.setLogLevel(level);
        }
 else         if (name.equalsIgnoreCase("SplashScreen")) {
          String value=xml.getAttributeValue(null,"value");
          int resource=0;
          if (value == null) {
            value="splash";
          }
          resource=action.getResources().getIdentifier(value,"drawable",action.getClass().getPackage().getName());
          action.getIntent().putExtra(name,resource);
        }
 else         if (name.equalsIgnoreCase("BackgroundColor")) {
          int value=xml.getAttributeIntValue(null,"value",Color.BLACK);
          action.getIntent().putExtra(name,value);
        }
 else         if (name.equalsIgnoreCase("LoadUrlTimeoutValue")) {
          int value=xml.getAttributeIntValue(null,"value",20000);
          action.getIntent().putExtra(name,value);
        }
 else         if (name.equalsIgnoreCase("SplashScreenDelay")) {
          int value=xml.getAttributeIntValue(null,"value",3000);
          action.getIntent().putExtra(name,value);
        }
 else         if (name.equalsIgnoreCase("KeepRunning")) {
          boolean value=xml.getAttributeValue(null,"value").equals("true");
          action.getIntent().putExtra(name,value);
        }
 else         if (name.equalsIgnoreCase("InAppBrowserStorageEnabled")) {
          boolean value=xml.getAttributeValue(null,"value").equals("true");
          action.getIntent().putExtra(name,value);
        }
 else         if (name.equalsIgnoreCase("DisallowOverscroll")) {
          boolean value=xml.getAttributeValue(null,"value").equals("true");
          action.getIntent().putExtra(name,value);
        }
 else {
          String value=xml.getAttributeValue(null,"value");
          action.getIntent().putExtra(name,value);
        }
      }
 else       if (strNode.equals("content")) {
        String src=xml.getAttributeValue(null,"src");
        LOG.i("CordovaLog","Found start page location: %s",src);
        if (src != null) {
          Pattern schemeRegex=Pattern.compile("^[a-z-]+://");
          Matcher matcher=schemeRegex.matcher(src);
          if (matcher.find()) {
            startUrl=src;
          }
 else {
            if (src.charAt(0) == '/') {
              src=src.substring(1);
            }
            startUrl="file:///android_asset/www/" + src;
          }
        }
      }
    }
    try {
      eventType=xml.next();
    }
 catch (    XmlPullParserException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
