{
  Object value=bundle.get(key);
  if (value == null) {
    return;
  }
  String supportedType=null;
  JSONArray jsonArray=null;
  JSONObject json=new JSONObject();
  if (value instanceof Byte) {
    supportedType=TYPE_BYTE;
    json.put(JSON_VALUE,((Byte)value).intValue());
  }
 else   if (value instanceof Short) {
    supportedType=TYPE_SHORT;
    json.put(JSON_VALUE,((Short)value).intValue());
  }
 else   if (value instanceof Integer) {
    supportedType=TYPE_INTEGER;
    json.put(JSON_VALUE,((Integer)value).intValue());
  }
 else   if (value instanceof Long) {
    supportedType=TYPE_LONG;
    json.put(JSON_VALUE,((Long)value).longValue());
  }
 else   if (value instanceof Float) {
    supportedType=TYPE_FLOAT;
    json.put(JSON_VALUE,((Float)value).doubleValue());
  }
 else   if (value instanceof Double) {
    supportedType=TYPE_DOUBLE;
    json.put(JSON_VALUE,((Double)value).doubleValue());
  }
 else   if (value instanceof Boolean) {
    supportedType=TYPE_BOOLEAN;
    json.put(JSON_VALUE,((Boolean)value).booleanValue());
  }
 else   if (value instanceof Character) {
    supportedType=TYPE_CHAR;
    json.put(JSON_VALUE,value.toString());
  }
 else   if (value instanceof String) {
    supportedType=TYPE_STRING;
    json.put(JSON_VALUE,(String)value);
  }
 else   if (value instanceof Enum<?>) {
    supportedType=TYPE_ENUM;
    json.put(JSON_VALUE,value.toString());
    json.put(JSON_VALUE_ENUM_TYPE,value.getClass().getName());
  }
 else {
    jsonArray=new JSONArray();
    if (value instanceof byte[]) {
      supportedType=TYPE_BYTE_ARRAY;
      for (      byte v : (byte[])value) {
        jsonArray.put((int)v);
      }
    }
 else     if (value instanceof short[]) {
      supportedType=TYPE_SHORT_ARRAY;
      for (      short v : (short[])value) {
        jsonArray.put((int)v);
      }
    }
 else     if (value instanceof int[]) {
      supportedType=TYPE_INTEGER_ARRAY;
      for (      int v : (int[])value) {
        jsonArray.put(v);
      }
    }
 else     if (value instanceof long[]) {
      supportedType=TYPE_LONG_ARRAY;
      for (      long v : (long[])value) {
        jsonArray.put(v);
      }
    }
 else     if (value instanceof float[]) {
      supportedType=TYPE_FLOAT_ARRAY;
      for (      float v : (float[])value) {
        jsonArray.put((double)v);
      }
    }
 else     if (value instanceof double[]) {
      supportedType=TYPE_DOUBLE_ARRAY;
      for (      double v : (double[])value) {
        jsonArray.put(v);
      }
    }
 else     if (value instanceof boolean[]) {
      supportedType=TYPE_BOOLEAN_ARRAY;
      for (      boolean v : (boolean[])value) {
        jsonArray.put(v);
      }
    }
 else     if (value instanceof char[]) {
      supportedType=TYPE_CHAR_ARRAY;
      for (      char v : (char[])value) {
        jsonArray.put(String.valueOf(v));
      }
    }
 else     if (value instanceof List<?>) {
      supportedType=TYPE_STRING_LIST;
      @SuppressWarnings("unchecked") List<String> stringList=(List<String>)value;
      for (      String v : stringList) {
        jsonArray.put((v == null) ? JSONObject.NULL : v);
      }
    }
 else {
      jsonArray=null;
    }
  }
  if (supportedType != null) {
    json.put(JSON_VALUE_TYPE,supportedType);
    if (jsonArray != null) {
      json.putOpt(JSON_VALUE,jsonArray);
    }
    String jsonString=json.toString();
    editor.putString(key,jsonString);
  }
}
