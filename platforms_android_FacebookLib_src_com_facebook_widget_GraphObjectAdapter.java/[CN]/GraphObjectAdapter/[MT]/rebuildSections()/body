{
  sectionKeys=new ArrayList<String>();
  graphObjectsBySection=new HashMap<String,ArrayList<T>>();
  graphObjectsById=new HashMap<String,T>();
  displaySections=false;
  if (cursor == null || cursor.getCount() == 0) {
    return;
  }
  int objectsAdded=0;
  cursor.moveToFirst();
  do {
    T graphObject=cursor.getGraphObject();
    if (!filterIncludesItem(graphObject)) {
      continue;
    }
    objectsAdded++;
    String sectionKeyOfItem=getSectionKeyOfGraphObject(graphObject);
    if (!graphObjectsBySection.containsKey(sectionKeyOfItem)) {
      sectionKeys.add(sectionKeyOfItem);
      graphObjectsBySection.put(sectionKeyOfItem,new ArrayList<T>());
    }
    List<T> section=graphObjectsBySection.get(sectionKeyOfItem);
    section.add(graphObject);
    graphObjectsById.put(getIdOfGraphObject(graphObject),graphObject);
  }
 while (cursor.moveToNext());
  if (sortFields != null) {
    final Collator collator=Collator.getInstance();
    for (    List<T> section : graphObjectsBySection.values()) {
      Collections.sort(section,new Comparator<GraphObject>(){
        @Override public int compare(        GraphObject a,        GraphObject b){
          return compareGraphObjects(a,b,sortFields,collator);
        }
      }
);
    }
  }
  Collections.sort(sectionKeys,Collator.getInstance());
  displaySections=sectionKeys.size() > 1 && objectsAdded > DISPLAY_SECTIONS_THRESHOLD;
}
