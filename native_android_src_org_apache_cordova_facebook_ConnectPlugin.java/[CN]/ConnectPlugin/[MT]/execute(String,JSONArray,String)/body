{
  PluginResult pr=new PluginResult(PluginResult.Status.NO_RESULT);
  pr.setKeepCallback(true);
  if (action.equals("init")) {
    try {
      Log.d(TAG,"init: Initializing plugin.");
      applicationId=args.getString(0);
      facebook=new Facebook(applicationId);
      this.loginCallbackId=callbackId;
      Session session=new Session.Builder(cordova.getActivity()).setApplicationId(applicationId).build();
      if (session.getState() == SessionState.CREATED_TOKEN_LOADED) {
        Session.setActiveSession(session);
        session.open();
      }
      if (session != null && session.isOpened()) {
        onSessionStateChange(session.getState(),null);
      }
 else {
        return new PluginResult(PluginResult.Status.OK);
      }
    }
 catch (    JSONException e) {
      e.printStackTrace();
      return new PluginResult(PluginResult.Status.ERROR,"Invalid JSON args used. expected a string as the first arg.");
    }
  }
 else   if (action.equals("login")) {
    this.loginCallbackId=callbackId;
    String[] arrayPermissions=new String[args.length()];
    try {
      for (int i=0; i < args.length(); i++) {
        arrayPermissions[i]=args.getString(i);
      }
    }
 catch (    JSONException e1) {
      e1.printStackTrace();
      return new PluginResult(PluginResult.Status.ERROR,"Invalid JSON args used. Expected a string array of permissions.");
    }
    List<String> permissions=null;
    if (arrayPermissions.length > 0) {
      permissions=Arrays.asList(arrayPermissions);
    }
    Session session=Session.getActiveSession();
    if (session != null && session.isOpened()) {
      boolean publishPermissions=false;
      boolean readPermissions=false;
      if (permissions == null) {
        readPermissions=true;
      }
      for (      String permission : arrayPermissions) {
        if (isPublishPermission(permission)) {
          publishPermissions=true;
        }
 else {
          readPermissions=true;
        }
        if (publishPermissions && readPermissions) {
          break;
        }
      }
      if (publishPermissions && readPermissions) {
        pr=new PluginResult(PluginResult.Status.ERROR,"Cannot ask for both read and publish permissions.");
      }
 else {
        Session.ReauthorizeRequest reauthorizeRequest=new Session.ReauthorizeRequest(cordova.getActivity(),permissions);
        cordova.setActivityResultCallback(this);
        if (publishPermissions) {
          session.reauthorizeForPublish(reauthorizeRequest);
        }
 else {
          session.reauthorizeForRead(reauthorizeRequest);
        }
      }
    }
 else {
      session=new Session.Builder(cordova.getActivity()).setApplicationId(applicationId).build();
      Session.setActiveSession(session);
      Session.OpenRequest openRequest=new Session.OpenRequest(cordova.getActivity());
      openRequest.setPermissions(permissions);
      openRequest.setCallback(new Session.StatusCallback(){
        @Override public void call(        Session session,        SessionState state,        Exception exception){
          onSessionStateChange(state,exception);
        }
      }
);
      cordova.setActivityResultCallback(this);
      session.openForRead(openRequest);
    }
  }
 else   if (action.equals("logout")) {
    Session session=Session.getActiveSession();
    if (session != null) {
      if (session.isOpened()) {
        session.closeAndClearTokenInformation();
        userId=null;
        pr=new PluginResult(PluginResult.Status.OK,getResponse());
      }
 else {
        pr=new PluginResult(PluginResult.Status.ERROR,"Session not open.");
      }
    }
 else {
      pr=new PluginResult(PluginResult.Status.ERROR,"No valid session found, must call init and login before logout.");
    }
  }
 else   if (action.equals("getLoginStatus")) {
    pr=new PluginResult(PluginResult.Status.OK,getResponse());
  }
 else   if (action.equals("showDialog")) {
    if (facebook != null) {
      Bundle collect=new Bundle();
      JSONObject params=null;
      try {
        params=args.getJSONObject(0);
      }
 catch (      JSONException e) {
        params=new JSONObject();
      }
      final ConnectPlugin me=this;
      Iterator<?> iter=params.keys();
      while (iter.hasNext()) {
        String key=(String)iter.next();
        if (key.equals("method")) {
          try {
            this.method=params.getString(key);
          }
 catch (          JSONException e) {
            Log.w(TAG,"Nonstring method parameter provided to dialog");
          }
        }
 else {
          try {
            collect.putString(key,params.getString(key));
          }
 catch (          JSONException e) {
            Log.w(TAG,"Nonstring parameter provided to dialog discarded");
          }
        }
      }
      this.paramBundle=new Bundle(collect);
      this.dialogCallbackId=callbackId;
      Runnable runnable=new Runnable(){
        public void run(){
          me.facebook.dialog(me.cordova.getActivity(),me.method,me.paramBundle,new UIDialogListener(me));
        }
      }
;
      cordova.getActivity().runOnUiThread(runnable);
    }
 else {
      pr=new PluginResult(PluginResult.Status.ERROR,"Must call init before showDialog.");
    }
  }
  return pr;
}
